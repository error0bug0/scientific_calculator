#include "mainwindow.h"
#include "ui_mainwindow.h"
#include"QButtonGroup"
#include<QProcess>
#include<QWebEngineView>
#include<QTimer>
#include<QTableWidget>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ConnectBtn();
    InitGroup();
    //InitCalculus();
    ui->lineEdit_value->hide();
    QTimer* timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()),this, SLOT(TimeOut()));
    timer->start(500);
    connect(ui->storage,SIGNAL(itemChanged(QTableWidgetItem*)),this,SLOT(ChangeStorage()));
}


MainWindow::~MainWindow()
{
    process->kill();
    process->close();
    delete process;
    delete group;
    delete ui;
}

void MainWindow::ConnectBtn()
{
    //page_change_button
    connect(ui->BtnMainPage,SIGNAL(clicked()),this,SLOT(on_BtnMainPage_clicked()));
    connect(ui->BtnNormCalc,SIGNAL(clicked()),this,SLOT(on_BtnNormCalc_clicked()));
    connect(ui->BtnComplexCalc,SIGNAL(clicked()),this,SLOT(on_BtnComplexCalc_clicked()));
    connect(ui->BtnVectorCalc,SIGNAL(clicked()),this,SLOT(on_BtnVectorCalc_clicked()));
    connect(ui->BtnMatrixCalc,SIGNAL(clicked()),this,SLOT(on_BtnMatrixCalc_clicked()));
    connect(ui->BtnStatCalc,SIGNAL(clicked()),this,SLOT(on_BtnStatCalc_clicked()));
    connect(ui->BtnCalculusCalc,SIGNAL(clicked()),this,SLOT(on_BtnCalculusCalc_clicked()));
    connect(ui->BtnFuncCalc,SIGNAL(clicked()),this,SLOT(on_BtnFuncCalc_clicked()));
    connect(ui->BtnStorage,SIGNAL(clicked()),this,SLOT(on_BtnStorage_clicked()));
    //calc_button
    connect(ui->calc_1,SIGNAL(clicked()),this,SLOT(CalcAns()));
    connect(ui->calc_2,SIGNAL(clicked()),this,SLOT(CalcAns()));
    connect(ui->calc_3,SIGNAL(clicked()),this,SLOT(CalcAns()));
    connect(ui->calc_6,SIGNAL(clicked()),this,SLOT(CalcAns()));
    connect(ui->calc_7,SIGNAL(clicked()),this,SLOT(CalcAns()));
}

void MainWindow::InitGroup()
{
    group = new QButtonGroup(this);
    group->setExclusive(true);
    group->addButton(ui->BtnMainPage,0);
    group->addButton(ui->BtnNormCalc,1);
    group->addButton(ui->BtnComplexCalc,2);
    group->addButton(ui->BtnVectorCalc,3);
    group->addButton(ui->BtnMatrixCalc,4);
    group->addButton(ui->BtnStatCalc,5);
    group->addButton(ui->BtnCalculusCalc,6);
    group->addButton(ui->BtnFuncCalc,7);
    group->addButton(ui->BtnStorage,8);
    ui->BtnMainPage->click();
}


void MainWindow::UpdateFormulaEditor()
{

    // 获取用户输入的公式
    int page_index=ui->stackedWidget->currentIndex();
    if(page_index!=1&&page_index!=2&&page_index!=3&&page_index!=6&&page_index!=7)return;
    QString formula;
    switch(page_index)
    {
    case 1:formula= ui->InputLineEdit1->text();break;
    case 2:formula= ui->InputLineEdit2->text();break;
    /*case 3:formula= ui->InputLineEdit3->text();break;
    /*case 4:formula= ui->InputLineEdit1->text();break;
    case 5:formula= ui->InputLineEdit1->text();break;*/
    case 6:formula= ui->InputLineEdit6->text();break;
    case 7:formula= ui->InputLineEdit7->text();break;
    /*case 8:formula= ui->InputLineEdit1->text();break; */
    }
    qDebug()<<formula;
    QString pythonPath="../../Python312/python.exe";
    QString scriptPath="../../python/mathml_to_html.py";
    QProcess process;

    connect(&process, &QProcess::readyReadStandardOutput, [&]() {
        QByteArray output = process.readAllStandardOutput();
        QString outputText = QString::fromLocal8Bit(output);
        qDebug() << "Standard output:" << outputText;
    });

    // 实时读取标准错误输出
    connect(&process, &QProcess::readyReadStandardError, [&]() {
        QByteArray errorOutput = process.readAllStandardError();
        QString errorOutputText = QString::fromLocal8Bit(errorOutput);
        qDebug() << "Standard error:" << errorOutputText;
    });
    process.start(pythonPath,QStringList()<<scriptPath);
    if (!process.waitForStarted()) {
        qDebug() << "Process failed to start.";
        return;
    }
    process.write(std::to_string(page_index).c_str());
    process.write("\n");
    process.write(formula.toStdString().c_str());
    process.write("\n");
    process.write("show\n");
    qDebug()<<formula.toStdString().c_str();
    process.waitForBytesWritten(10000);
    if (!process.waitForFinished()) {
        qDebug() << "Process failed to finish.";
        return;
    }
    // 设置 QWebEngineView 的 HTML 内容为 MathML
    QUrl exePath = QUrl(QCoreApplication::applicationFilePath());
    QUrl relativeUrl;
    switch (page_index)
    {
    case 1:
        relativeUrl=QUrl("../../../html/input_formula1.html");
        ui->InputWebWidget1->load(exePath.resolved(relativeUrl));
        break;
    case 2:
        relativeUrl=QUrl("../../../html/input_formula2.html");
        ui->InputWebWidget2->load(exePath.resolved(relativeUrl));
        break;
    case 3:
        //relativeUrl=QUrl("../../../html/input_formula3.html");
        //ui->InputWebWidget3->load(exePath.resolved(relativeUrl));
        break;
    case 6:
        relativeUrl=QUrl("../../../html/input_formula6.html");
        ui->InputWebWidget6->load(exePath.resolved(relativeUrl));
        break;
    case 7:
        relativeUrl=QUrl("../../../html/input_formula7.html");
        ui->InputWebWidget7->load(exePath.resolved(relativeUrl));
        break;
    }
}

/*void::MainWindow::CalculusMode()
{
    if(ui->radioButton6_mode1->isChecked())
    {
        ui->CalculusTab->setCurrentIndex(0);
        if(ui->radioButton6_var1->isChecked())
        {
            ui->P6labelx->show();
            ui->lineEdit_x_low->show();
            ui->lineEdit_x_high->show();
            ui->P6labely->hide();
            ui->lineEdit_y_low->hide();
            ui->lineEdit_y_high->hide();
            ui->P6labelz->hide();
            ui->lineEdit_z_low->hide();
            ui->lineEdit_z_high->hide();
        }
        else if(ui->radioButton6_var2->isChecked())
        {
            ui->P6labelx->show();
            ui->lineEdit_x_low->show();
            ui->lineEdit_x_high->show();
            ui->P6labely->show();
            ui->lineEdit_y_low->show();
            ui->lineEdit_y_high->show();
            ui->P6labelz->hide();
            ui->lineEdit_z_low->hide();
            ui->lineEdit_z_high->hide();
        }
        else if(ui->radioButton6_var3->isChecked())
        {
            ui->P6labelx->show();
            ui->lineEdit_x_low->show();
            ui->lineEdit_x_high->show();
            ui->P6labely->show();
            ui->lineEdit_y_low->show();
            ui->lineEdit_y_high->show();
            ui->P6labelz->show();
            ui->lineEdit_z_low->show();
            ui->lineEdit_z_high->show();
        }
    }
    if(ui->radioButton6_mode3->isChecked())
    {
        ui->CalculusTab->setCurrentIndex(1);
        if(ui->radioButton6_var1->isChecked())
        {
            ui->P6labelx2->show();
            ui->P6labely2->hide();
            ui->P6labelz2->hide();
            ui->lineEdit_x_value->show();
            ui->lineEdit_y_value->hide();
            ui->lineEdit_z_value->hide();
        }
        else if(ui->radioButton6_var2->isChecked())
        {
            ui->P6labelx2->show();
            ui->P6labely2->show();
            ui->P6labelz2->hide();
            ui->lineEdit_x_value->show();
            ui->lineEdit_y_value->show();
            ui->lineEdit_z_value->hide();
        }
        else if(ui->radioButton6_var3->isChecked())
        {
            ui->P6labelx2->show();
            ui->P6labely2->show();
            ui->P6labelz2->show();
            ui->lineEdit_x_value->show();
            ui->lineEdit_y_value->show();
            ui->lineEdit_z_value->show();
        }
    }
}*/

void MainWindow::ChangeStorage()
{
    QString pythonPath="../../Python312/python.exe";
    QString scriptPath="../../python/change_storage.py";
    QProcess process;
    connect(&process, &QProcess::readyReadStandardOutput, [&]() {
        QByteArray output = process.readAllStandardOutput();
        QString outputText = QString::fromLocal8Bit(output);
        qDebug() << "Standard output:" << outputText;
    });

    // 实时读取标准错误输出
    connect(&process, &QProcess::readyReadStandardError, [&]() {
        QByteArray errorOutput = process.readAllStandardError();
        QString errorOutputText = QString::fromLocal8Bit(errorOutput);
        qDebug() << "Standard error:" << errorOutputText;
    });
    process.start(pythonPath,QStringList()<<scriptPath);
    if (!process.waitForStarted()) {
        qDebug() << "Process failed to start.";
        return;
    }
    int row=ui->storage->rowCount();

    process.write(std::to_string(row).c_str());
    process.write("\n");
    for(int i=1;i<=row;i++)
    {
        if(ui->storage->item(i-1,0)!=nullptr&&ui->storage->item(i-1,1)!=nullptr)
        {
            process.write(ui->storage->item(i-1,0)->text().toStdString().c_str());
            process.write("\n");
            process.write(ui->storage->item(i-1,1)->text().toStdString().c_str());
            process.write("\n");
        }
        else
            process.write("\n\n");
    }

    process.waitForBytesWritten(10000);
    if (!process.waitForFinished()) {
        qDebug() << "Process failed to finish.";
        return;
    }
}

void MainWindow::CalcAns()
{
    int page_index=ui->stackedWidget->currentIndex();
    QString formula;
    switch(page_index)
    {
    case 1:formula= ui->InputLineEdit1->text();break;
    case 2:formula= ui->InputLineEdit2->text();break;
    //case 3:formula= ui->InputLineEdit3->text();break;
    /*case 4:formula= ui->InputLineEdit1->text();break;
    case 5:formula= ui->InputLineEdit1->text();break;*/
    case 6:formula= ui->InputLineEdit6->text();break;
    case 7:formula= ui->InputLineEdit7->text();break;
    /*case 8:formula= ui->InputLineEdit1->text();break; */
    }

    QString pythonPath="../../Python312/python.exe";
    QString scriptPath="../../python/mathml_to_html.py";
    QProcess process;

    process.start(pythonPath,QStringList()<<scriptPath);
    if (!process.waitForStarted()) {
        qDebug() << "Process failed to start.";
        return;
    }
    process.write(std::to_string(page_index).c_str());
    process.write("\n");
    process.write(formula.toStdString().c_str());
    process.write("\n");
    process.write("eval\n");
    if(page_index==6)
    {
        if(ui->radioButton6_mode1->isChecked())
        {
            process.write("integral_1\n");
            QString low=ui->lineEdit_low->text();
            QString high=ui->lineEdit_high->text();
            process.write(low.toStdString().c_str());
            process.write("\n");
            process.write(high.toStdString().c_str());
            process.write("\n");
        }
        if(ui->radioButton6_mode2->isChecked())
            process.write("integral_2\n");
        if(ui->radioButton6_mode3->isChecked())
        {
            process.write("diff_1\n");
            QString value=ui->lineEdit_value->text();
            process.write(value.toStdString().c_str());
            process.write("\n");
        }

        if(ui->radioButton6_mode4->isChecked())
            process.write("diff_2\n");
    }
    if (page_index==7){
        if(ui->radioButton7_mode2->isChecked())
        {
            process.write("function\n");
            QString value=ui->lineEdit_value_2->text();
            process.write(value.toStdString().c_str());
            process.write("\n");
        }
        if(ui->radioButton7_mode1->isChecked())
        {
            process.write("equation\n");
        }
    }
    process.waitForBytesWritten(10000);
    if (!process.waitForFinished()) {
        qDebug() << "Process failed to finish.";
        return;
    }

    // 设置 QWebEngineView 的 HTML 内容为 MathML
    QUrl exePath = QUrl(QCoreApplication::applicationFilePath());
    QUrl relativeUrl;
    switch (page_index)
    {
    case 1:
        relativeUrl=QUrl("../../../html/output_formula1.html");
        ui->OutputWebWidget1->load(exePath.resolved(relativeUrl));
        break;
    case 2:
        relativeUrl=QUrl("../../../html/output_formula2.html");
        ui->OutputWebWidget2->load(exePath.resolved(relativeUrl));
        break;
    case 3:
        relativeUrl=QUrl("../../../html/output_formula3.html");
        //ui->OutputWebWidget3->load(exePath.resolved(relativeUrl));
        break;
    case 6:
        relativeUrl=QUrl("../../../html/output_formula6.html");
        ui->OutputWebWidget6->load(exePath.resolved(relativeUrl));
        break;
    case 7:
        relativeUrl=QUrl("../../../html/output_formula7.html");
        ui->OutputWebWidget7->load(exePath.resolved(relativeUrl));
        break;
    }

}

void MainWindow::TimeOut()
{
    UpdateFormulaEditor();
}

void MainWindow::on_BtnMainPage_clicked()
{
    ui->stackedWidget->setCurrentIndex(0);
}
void MainWindow::on_BtnNormCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(1);
}
void MainWindow::on_BtnComplexCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(2);
}
void MainWindow::on_BtnVectorCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(3);
}
void MainWindow::on_BtnMatrixCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(4);
}
void MainWindow::on_BtnStatCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(5);
}
void MainWindow::on_BtnCalculusCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(6);
}
void MainWindow::on_BtnFuncCalc_clicked()
{
    ui->stackedWidget->setCurrentIndex(7);
}


void MainWindow::on_BtnStorage_clicked()
{
    ui->stackedWidget->setCurrentIndex(8);
}


void MainWindow::on_BtnAdd1_clicked()
{
    int row_count=ui->P5data1->rowCount();
    ui->P5data1->setRowCount(row_count+1);
}


void MainWindow::on_BtnDelete1_clicked()
{
    int row_count=ui->P5data1->rowCount();
    if(row_count>=2)
    ui->P5data1->setRowCount(row_count-1);
}


void MainWindow::on_calc_5_1_clicked()
{
    int row_count=ui->P5data1->rowCount();
    QList<double> data;
    int n=0;
    for(int i=0;i<row_count;i++)
    {
        if(ui->P5data1->item(i,0)!=nullptr)
        {
            n++;
            data.push_back(ui->P5data1->item(i,0)->text().toDouble());
        }
        else
            data.push_back(0);
    }
    double sum_x=0,sum_x_2=0;
    for(int i=0;i<row_count;i++)
    {
        sum_x+=data[i];
        sum_x_2+=data[i]*data[i];
    }
    double E_x=sum_x/n;
    ui->E_x->setText(std::to_string(E_x).c_str());
    double D_x=sum_x_2/n-E_x*E_x;
    ui->D_x->setText(std::to_string(D_x).c_str());
    ui->Sum_x->setText(std::to_string(sum_x).c_str());
    ui->Sum_x_2->setText(std::to_string(sum_x_2).c_str());
    double min_num=1E99;
    double max_num=-1E99;
    for(int i=0;i<row_count;i++)
    {
        if(ui->P5data1->item(i,0)!=nullptr)
        {
            if(min_num>data[i])
                min_num=data[i];
            if(max_num<data[i])
                max_num=data[i];
        }
    }
    ui->Min_x->setText(std::to_string(min_num).c_str());
    ui->Max_x->setText(std::to_string(max_num).c_str());
}


void MainWindow::on_BtnAdd2_clicked()
{
    int row_count=ui->P5data2->rowCount();
    ui->P5data2->setRowCount(row_count+1);
}


void MainWindow::on_BtnDelete2_clicked()
{
    int row_count=ui->P5data2->rowCount();
    if(row_count>=2)
        ui->P5data2->setRowCount(row_count-1);
}



void MainWindow::on_regression_clicked()
{
    int row_count=ui->P5data2->rowCount();
    QList<double> data2x;
    QList<double> data2y;
    int n_x=0,n_y=0,n=0;
    for(int i=0;i<row_count;i++)
    {
        if(ui->P5data2->item(i,0)!=nullptr)
        {
            n_x++;
            data2x.push_back(ui->P5data2->item(i,0)->text().toDouble());
        }
        else
            data2x.push_back(0);
        if(ui->P5data2->item(i,1)!=nullptr)
        {
            n_y++;
            data2y.push_back(ui->P5data2->item(i,1)->text().toDouble());
        }
        else
            data2y.push_back(0);
    }
    if(n_x==n_y)
        n=n_x;
    else
    {
        ui->Stat_k->setText("error");
        ui->Stat_b->setText("error");
        return;
    }
    double sum_x=0,sum_x_2=0;
    double sum_y=0,sum_xy=0;
    for(int i=0;i<row_count;i++)
    {
        sum_x+=data2x[i];
        sum_x_2+=data2x[i]*data2x[i];
        sum_y+=data2y[i];
        sum_xy+=data2x[i]*data2y[i];
    }
    double E_x=sum_x/n;
    double E_y=sum_y/n;
    double E_x_2=sum_x_2/n;
    double E_xy=sum_xy/n;
    double k=(E_xy-E_x*E_y)/(E_x_2-E_x*E_x);
    double b=E_y-k*E_x;
    ui->Stat_k->setText(std::to_string(k).c_str());
    ui->Stat_b->setText(std::to_string(b).c_str());
}

